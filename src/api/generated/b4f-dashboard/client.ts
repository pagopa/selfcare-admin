/**
 * Do not edit this file it is auto-generated by io-utils / gen-api-models.
 * See https://github.com/pagopa/io-utils
 */
/* eslint-disable  */

import { withoutUndefinedValues } from "@pagopa/ts-commons/lib/types";
import {
  RequestParams,
  TypeofApiCall,
  TypeofApiParams,
  createFetchRequestForApi,
  ReplaceRequestParams
} from "@pagopa/ts-commons/lib/requests";
import { identity } from "fp-ts/lib/function";

import {
  GetInstitutionsUsingGETT,
  getInstitutionsUsingGETDefaultDecoder,
  GetInstitutionUsingGETT,
  getInstitutionUsingGETDefaultDecoder,
  SaveInstitutionLogoUsingPUTT,
  saveInstitutionLogoUsingPUTDefaultDecoder,
  GetInstitutionProductsUsingGETT,
  getInstitutionProductsUsingGETDefaultDecoder,
  GetInstitutionProductUsersUsingGETT,
  getInstitutionProductUsersUsingGETDefaultDecoder,
  CreateInstitutionProductUserUsingPOSTT,
  createInstitutionProductUserUsingPOSTDefaultDecoder,
  AddUserProductRolesUsingPUTT,
  addUserProductRolesUsingPUTDefaultDecoder,
  GetInstitutionUsersUsingGETT,
  getInstitutionUsersUsingGETDefaultDecoder,
  GetInstitutionUserUsingGETT,
  getInstitutionUserUsingGETDefaultDecoder,
  ApproveOnboardingRequestUsingPOSTT,
  approveOnboardingRequestUsingPOSTDefaultDecoder,
  RejectOnboardingRequestUsingDELETET,
  rejectOnboardingRequestUsingDELETEDefaultDecoder,
  RetrieveOnboardingRequestUsingGETT,
  retrieveOnboardingRequestUsingGETDefaultDecoder,
  RetrieveProductBackofficeUsingGETT,
  retrieveProductBackofficeUsingGETDefaultDecoder,
  GetProductRolesUsingGETT,
  getProductRolesUsingGETDefaultDecoder,
  DeleteRelationshipByIdUsingDELETET,
  deleteRelationshipByIdUsingDELETEDefaultDecoder,
  ActivateRelationshipUsingPOSTT,
  activateRelationshipUsingPOSTDefaultDecoder,
  SuspendRelationshipUsingPOSTT,
  suspendRelationshipUsingPOSTDefaultDecoder,
  ExchangeUsingGETT,
  exchangeUsingGETDefaultDecoder,
  GetUserGroupsUsingGETT,
  getUserGroupsUsingGETDefaultDecoder,
  CreateUserGroupUsingPOSTT,
  createUserGroupUsingPOSTDefaultDecoder,
  DeleteUserGroupUsingDELETET,
  deleteUserGroupUsingDELETEDefaultDecoder,
  GetUserGroupByIdUsingGETT,
  getUserGroupByIdUsingGETDefaultDecoder,
  UpdateUserGroupUsingPUTT,
  updateUserGroupUsingPUTDefaultDecoder,
  ActivateUserGroupUsingPOSTT,
  activateUserGroupUsingPOSTDefaultDecoder,
  AddMemberToUserGroupUsingPOSTT,
  addMemberToUserGroupUsingPOSTDefaultDecoder,
  SuspendUserGroupUsingPOSTT,
  suspendUserGroupUsingPOSTDefaultDecoder,
  DeleteMemberFromUserGroupUsingDELETET,
  deleteMemberFromUserGroupUsingDELETEDefaultDecoder,
  SaveUserUsingPOSTT,
  saveUserUsingPOSTDefaultDecoder,
  SearchUsingPOSTT,
  searchUsingPOSTDefaultDecoder,
  DeleteUserByIdUsingDELETET,
  deleteUserByIdUsingDELETEDefaultDecoder,
  GetUserByInternalIdUsingGETT,
  getUserByInternalIdUsingGETDefaultDecoder,
  UpdateUserUsingPUTT,
  updateUserUsingPUTDefaultDecoder
} from "./requestTypes";

// This is a placeholder for undefined when dealing with object keys
// Typescript doesn't perform well when narrowing a union type which includes string and undefined
// (example: "foo" | "bar" | undefined)
// We use this as a placeholder for type parameters indicating "no key"
type __UNDEFINED_KEY = "_____";

export type ApiOperation = TypeofApiCall<GetInstitutionsUsingGETT> &
  TypeofApiCall<GetInstitutionUsingGETT> &
  TypeofApiCall<SaveInstitutionLogoUsingPUTT> &
  TypeofApiCall<GetInstitutionProductsUsingGETT> &
  TypeofApiCall<GetInstitutionProductUsersUsingGETT> &
  TypeofApiCall<CreateInstitutionProductUserUsingPOSTT> &
  TypeofApiCall<AddUserProductRolesUsingPUTT> &
  TypeofApiCall<GetInstitutionUsersUsingGETT> &
  TypeofApiCall<GetInstitutionUserUsingGETT> &
  TypeofApiCall<ApproveOnboardingRequestUsingPOSTT> &
  TypeofApiCall<RejectOnboardingRequestUsingDELETET> &
  TypeofApiCall<RetrieveOnboardingRequestUsingGETT> &
  TypeofApiCall<RetrieveProductBackofficeUsingGETT> &
  TypeofApiCall<GetProductRolesUsingGETT> &
  TypeofApiCall<DeleteRelationshipByIdUsingDELETET> &
  TypeofApiCall<ActivateRelationshipUsingPOSTT> &
  TypeofApiCall<SuspendRelationshipUsingPOSTT> &
  TypeofApiCall<ExchangeUsingGETT> &
  TypeofApiCall<GetUserGroupsUsingGETT> &
  TypeofApiCall<CreateUserGroupUsingPOSTT> &
  TypeofApiCall<DeleteUserGroupUsingDELETET> &
  TypeofApiCall<GetUserGroupByIdUsingGETT> &
  TypeofApiCall<UpdateUserGroupUsingPUTT> &
  TypeofApiCall<ActivateUserGroupUsingPOSTT> &
  TypeofApiCall<AddMemberToUserGroupUsingPOSTT> &
  TypeofApiCall<SuspendUserGroupUsingPOSTT> &
  TypeofApiCall<DeleteMemberFromUserGroupUsingDELETET> &
  TypeofApiCall<SaveUserUsingPOSTT> &
  TypeofApiCall<SearchUsingPOSTT> &
  TypeofApiCall<DeleteUserByIdUsingDELETET> &
  TypeofApiCall<GetUserByInternalIdUsingGETT> &
  TypeofApiCall<UpdateUserUsingPUTT>;

export type ParamKeys = keyof (TypeofApiParams<GetInstitutionsUsingGETT> &
  TypeofApiParams<GetInstitutionUsingGETT> &
  TypeofApiParams<SaveInstitutionLogoUsingPUTT> &
  TypeofApiParams<GetInstitutionProductsUsingGETT> &
  TypeofApiParams<GetInstitutionProductUsersUsingGETT> &
  TypeofApiParams<CreateInstitutionProductUserUsingPOSTT> &
  TypeofApiParams<AddUserProductRolesUsingPUTT> &
  TypeofApiParams<GetInstitutionUsersUsingGETT> &
  TypeofApiParams<GetInstitutionUserUsingGETT> &
  TypeofApiParams<ApproveOnboardingRequestUsingPOSTT> &
  TypeofApiParams<RejectOnboardingRequestUsingDELETET> &
  TypeofApiParams<RetrieveOnboardingRequestUsingGETT> &
  TypeofApiParams<RetrieveProductBackofficeUsingGETT> &
  TypeofApiParams<GetProductRolesUsingGETT> &
  TypeofApiParams<DeleteRelationshipByIdUsingDELETET> &
  TypeofApiParams<ActivateRelationshipUsingPOSTT> &
  TypeofApiParams<SuspendRelationshipUsingPOSTT> &
  TypeofApiParams<ExchangeUsingGETT> &
  TypeofApiParams<GetUserGroupsUsingGETT> &
  TypeofApiParams<CreateUserGroupUsingPOSTT> &
  TypeofApiParams<DeleteUserGroupUsingDELETET> &
  TypeofApiParams<GetUserGroupByIdUsingGETT> &
  TypeofApiParams<UpdateUserGroupUsingPUTT> &
  TypeofApiParams<ActivateUserGroupUsingPOSTT> &
  TypeofApiParams<AddMemberToUserGroupUsingPOSTT> &
  TypeofApiParams<SuspendUserGroupUsingPOSTT> &
  TypeofApiParams<DeleteMemberFromUserGroupUsingDELETET> &
  TypeofApiParams<SaveUserUsingPOSTT> &
  TypeofApiParams<SearchUsingPOSTT> &
  TypeofApiParams<DeleteUserByIdUsingDELETET> &
  TypeofApiParams<GetUserByInternalIdUsingGETT> &
  TypeofApiParams<UpdateUserUsingPUTT>);

/**
 * Defines an adapter for TypeofApiCall which omit one or more parameters in the signature
 * @param ApiT the type which defines the operation to expose
 * @param K the parameter to omit. undefined means no parameters will be omitted
 */
export type OmitApiCallParams<
  ApiT,
  K extends ParamKeys | __UNDEFINED_KEY = __UNDEFINED_KEY
> = (
  op: TypeofApiCall<ApiT>
) => K extends __UNDEFINED_KEY
  ? TypeofApiCall<ApiT>
  : TypeofApiCall<ReplaceRequestParams<ApiT, Omit<RequestParams<ApiT>, K>>>;

/**
 * Defines an adapter for TypeofApiCall which omit one or more parameters in the signature
 * @param ApiT the type which defines the operation to expose
 * @param K the parameter to omit. undefined means no parameters will be omitted
 */
export type WithDefaultsT<
  K extends ParamKeys | __UNDEFINED_KEY = __UNDEFINED_KEY
> = OmitApiCallParams<
  | GetInstitutionsUsingGETT
  | GetInstitutionUsingGETT
  | SaveInstitutionLogoUsingPUTT
  | GetInstitutionProductsUsingGETT
  | GetInstitutionProductUsersUsingGETT
  | CreateInstitutionProductUserUsingPOSTT
  | AddUserProductRolesUsingPUTT
  | GetInstitutionUsersUsingGETT
  | GetInstitutionUserUsingGETT
  | ApproveOnboardingRequestUsingPOSTT
  | RejectOnboardingRequestUsingDELETET
  | RetrieveOnboardingRequestUsingGETT
  | RetrieveProductBackofficeUsingGETT
  | GetProductRolesUsingGETT
  | DeleteRelationshipByIdUsingDELETET
  | ActivateRelationshipUsingPOSTT
  | SuspendRelationshipUsingPOSTT
  | ExchangeUsingGETT
  | GetUserGroupsUsingGETT
  | CreateUserGroupUsingPOSTT
  | DeleteUserGroupUsingDELETET
  | GetUserGroupByIdUsingGETT
  | UpdateUserGroupUsingPUTT
  | ActivateUserGroupUsingPOSTT
  | AddMemberToUserGroupUsingPOSTT
  | SuspendUserGroupUsingPOSTT
  | DeleteMemberFromUserGroupUsingDELETET
  | SaveUserUsingPOSTT
  | SearchUsingPOSTT
  | DeleteUserByIdUsingDELETET
  | GetUserByInternalIdUsingGETT
  | UpdateUserUsingPUTT,
  K
>;

/**
 * Defines a collection of api operations
 * @param K name of the parameters that the Clients masks from the operations
 */
export type Client<
  K extends ParamKeys | __UNDEFINED_KEY = __UNDEFINED_KEY
> = K extends __UNDEFINED_KEY
  ? {
      readonly getInstitutionsUsingGET: TypeofApiCall<GetInstitutionsUsingGETT>;

      readonly getInstitutionUsingGET: TypeofApiCall<GetInstitutionUsingGETT>;

      readonly saveInstitutionLogoUsingPUT: TypeofApiCall<
        SaveInstitutionLogoUsingPUTT
      >;

      readonly getInstitutionProductsUsingGET: TypeofApiCall<
        GetInstitutionProductsUsingGETT
      >;

      readonly getInstitutionProductUsersUsingGET: TypeofApiCall<
        GetInstitutionProductUsersUsingGETT
      >;

      readonly createInstitutionProductUserUsingPOST: TypeofApiCall<
        CreateInstitutionProductUserUsingPOSTT
      >;

      readonly addUserProductRolesUsingPUT: TypeofApiCall<
        AddUserProductRolesUsingPUTT
      >;

      readonly getInstitutionUsersUsingGET: TypeofApiCall<
        GetInstitutionUsersUsingGETT
      >;

      readonly getInstitutionUserUsingGET: TypeofApiCall<
        GetInstitutionUserUsingGETT
      >;

      readonly approveOnboardingRequestUsingPOST: TypeofApiCall<
        ApproveOnboardingRequestUsingPOSTT
      >;

      readonly rejectOnboardingRequestUsingDELETE: TypeofApiCall<
        RejectOnboardingRequestUsingDELETET
      >;

      readonly retrieveOnboardingRequestUsingGET: TypeofApiCall<
        RetrieveOnboardingRequestUsingGETT
      >;

      readonly retrieveProductBackofficeUsingGET: TypeofApiCall<
        RetrieveProductBackofficeUsingGETT
      >;

      readonly getProductRolesUsingGET: TypeofApiCall<GetProductRolesUsingGETT>;

      readonly deleteRelationshipByIdUsingDELETE: TypeofApiCall<
        DeleteRelationshipByIdUsingDELETET
      >;

      readonly activateRelationshipUsingPOST: TypeofApiCall<
        ActivateRelationshipUsingPOSTT
      >;

      readonly suspendRelationshipUsingPOST: TypeofApiCall<
        SuspendRelationshipUsingPOSTT
      >;

      readonly exchangeUsingGET: TypeofApiCall<ExchangeUsingGETT>;

      readonly getUserGroupsUsingGET: TypeofApiCall<GetUserGroupsUsingGETT>;

      readonly createUserGroupUsingPOST: TypeofApiCall<
        CreateUserGroupUsingPOSTT
      >;

      readonly deleteUserGroupUsingDELETE: TypeofApiCall<
        DeleteUserGroupUsingDELETET
      >;

      readonly getUserGroupByIdUsingGET: TypeofApiCall<
        GetUserGroupByIdUsingGETT
      >;

      readonly updateUserGroupUsingPUT: TypeofApiCall<UpdateUserGroupUsingPUTT>;

      readonly activateUserGroupUsingPOST: TypeofApiCall<
        ActivateUserGroupUsingPOSTT
      >;

      readonly addMemberToUserGroupUsingPOST: TypeofApiCall<
        AddMemberToUserGroupUsingPOSTT
      >;

      readonly suspendUserGroupUsingPOST: TypeofApiCall<
        SuspendUserGroupUsingPOSTT
      >;

      readonly deleteMemberFromUserGroupUsingDELETE: TypeofApiCall<
        DeleteMemberFromUserGroupUsingDELETET
      >;

      readonly saveUserUsingPOST: TypeofApiCall<SaveUserUsingPOSTT>;

      readonly searchUsingPOST: TypeofApiCall<SearchUsingPOSTT>;

      readonly deleteUserByIdUsingDELETE: TypeofApiCall<
        DeleteUserByIdUsingDELETET
      >;

      readonly getUserByInternalIdUsingGET: TypeofApiCall<
        GetUserByInternalIdUsingGETT
      >;

      readonly updateUserUsingPUT: TypeofApiCall<UpdateUserUsingPUTT>;
    }
  : {
      readonly getInstitutionsUsingGET: TypeofApiCall<
        ReplaceRequestParams<
          GetInstitutionsUsingGETT,
          Omit<RequestParams<GetInstitutionsUsingGETT>, K>
        >
      >;

      readonly getInstitutionUsingGET: TypeofApiCall<
        ReplaceRequestParams<
          GetInstitutionUsingGETT,
          Omit<RequestParams<GetInstitutionUsingGETT>, K>
        >
      >;

      readonly saveInstitutionLogoUsingPUT: TypeofApiCall<
        ReplaceRequestParams<
          SaveInstitutionLogoUsingPUTT,
          Omit<RequestParams<SaveInstitutionLogoUsingPUTT>, K>
        >
      >;

      readonly getInstitutionProductsUsingGET: TypeofApiCall<
        ReplaceRequestParams<
          GetInstitutionProductsUsingGETT,
          Omit<RequestParams<GetInstitutionProductsUsingGETT>, K>
        >
      >;

      readonly getInstitutionProductUsersUsingGET: TypeofApiCall<
        ReplaceRequestParams<
          GetInstitutionProductUsersUsingGETT,
          Omit<RequestParams<GetInstitutionProductUsersUsingGETT>, K>
        >
      >;

      readonly createInstitutionProductUserUsingPOST: TypeofApiCall<
        ReplaceRequestParams<
          CreateInstitutionProductUserUsingPOSTT,
          Omit<RequestParams<CreateInstitutionProductUserUsingPOSTT>, K>
        >
      >;

      readonly addUserProductRolesUsingPUT: TypeofApiCall<
        ReplaceRequestParams<
          AddUserProductRolesUsingPUTT,
          Omit<RequestParams<AddUserProductRolesUsingPUTT>, K>
        >
      >;

      readonly getInstitutionUsersUsingGET: TypeofApiCall<
        ReplaceRequestParams<
          GetInstitutionUsersUsingGETT,
          Omit<RequestParams<GetInstitutionUsersUsingGETT>, K>
        >
      >;

      readonly getInstitutionUserUsingGET: TypeofApiCall<
        ReplaceRequestParams<
          GetInstitutionUserUsingGETT,
          Omit<RequestParams<GetInstitutionUserUsingGETT>, K>
        >
      >;

      readonly approveOnboardingRequestUsingPOST: TypeofApiCall<
        ReplaceRequestParams<
          ApproveOnboardingRequestUsingPOSTT,
          Omit<RequestParams<ApproveOnboardingRequestUsingPOSTT>, K>
        >
      >;

      readonly rejectOnboardingRequestUsingDELETE: TypeofApiCall<
        ReplaceRequestParams<
          RejectOnboardingRequestUsingDELETET,
          Omit<RequestParams<RejectOnboardingRequestUsingDELETET>, K>
        >
      >;

      readonly retrieveOnboardingRequestUsingGET: TypeofApiCall<
        ReplaceRequestParams<
          RetrieveOnboardingRequestUsingGETT,
          Omit<RequestParams<RetrieveOnboardingRequestUsingGETT>, K>
        >
      >;

      readonly retrieveProductBackofficeUsingGET: TypeofApiCall<
        ReplaceRequestParams<
          RetrieveProductBackofficeUsingGETT,
          Omit<RequestParams<RetrieveProductBackofficeUsingGETT>, K>
        >
      >;

      readonly getProductRolesUsingGET: TypeofApiCall<
        ReplaceRequestParams<
          GetProductRolesUsingGETT,
          Omit<RequestParams<GetProductRolesUsingGETT>, K>
        >
      >;

      readonly deleteRelationshipByIdUsingDELETE: TypeofApiCall<
        ReplaceRequestParams<
          DeleteRelationshipByIdUsingDELETET,
          Omit<RequestParams<DeleteRelationshipByIdUsingDELETET>, K>
        >
      >;

      readonly activateRelationshipUsingPOST: TypeofApiCall<
        ReplaceRequestParams<
          ActivateRelationshipUsingPOSTT,
          Omit<RequestParams<ActivateRelationshipUsingPOSTT>, K>
        >
      >;

      readonly suspendRelationshipUsingPOST: TypeofApiCall<
        ReplaceRequestParams<
          SuspendRelationshipUsingPOSTT,
          Omit<RequestParams<SuspendRelationshipUsingPOSTT>, K>
        >
      >;

      readonly exchangeUsingGET: TypeofApiCall<
        ReplaceRequestParams<
          ExchangeUsingGETT,
          Omit<RequestParams<ExchangeUsingGETT>, K>
        >
      >;

      readonly getUserGroupsUsingGET: TypeofApiCall<
        ReplaceRequestParams<
          GetUserGroupsUsingGETT,
          Omit<RequestParams<GetUserGroupsUsingGETT>, K>
        >
      >;

      readonly createUserGroupUsingPOST: TypeofApiCall<
        ReplaceRequestParams<
          CreateUserGroupUsingPOSTT,
          Omit<RequestParams<CreateUserGroupUsingPOSTT>, K>
        >
      >;

      readonly deleteUserGroupUsingDELETE: TypeofApiCall<
        ReplaceRequestParams<
          DeleteUserGroupUsingDELETET,
          Omit<RequestParams<DeleteUserGroupUsingDELETET>, K>
        >
      >;

      readonly getUserGroupByIdUsingGET: TypeofApiCall<
        ReplaceRequestParams<
          GetUserGroupByIdUsingGETT,
          Omit<RequestParams<GetUserGroupByIdUsingGETT>, K>
        >
      >;

      readonly updateUserGroupUsingPUT: TypeofApiCall<
        ReplaceRequestParams<
          UpdateUserGroupUsingPUTT,
          Omit<RequestParams<UpdateUserGroupUsingPUTT>, K>
        >
      >;

      readonly activateUserGroupUsingPOST: TypeofApiCall<
        ReplaceRequestParams<
          ActivateUserGroupUsingPOSTT,
          Omit<RequestParams<ActivateUserGroupUsingPOSTT>, K>
        >
      >;

      readonly addMemberToUserGroupUsingPOST: TypeofApiCall<
        ReplaceRequestParams<
          AddMemberToUserGroupUsingPOSTT,
          Omit<RequestParams<AddMemberToUserGroupUsingPOSTT>, K>
        >
      >;

      readonly suspendUserGroupUsingPOST: TypeofApiCall<
        ReplaceRequestParams<
          SuspendUserGroupUsingPOSTT,
          Omit<RequestParams<SuspendUserGroupUsingPOSTT>, K>
        >
      >;

      readonly deleteMemberFromUserGroupUsingDELETE: TypeofApiCall<
        ReplaceRequestParams<
          DeleteMemberFromUserGroupUsingDELETET,
          Omit<RequestParams<DeleteMemberFromUserGroupUsingDELETET>, K>
        >
      >;

      readonly saveUserUsingPOST: TypeofApiCall<
        ReplaceRequestParams<
          SaveUserUsingPOSTT,
          Omit<RequestParams<SaveUserUsingPOSTT>, K>
        >
      >;

      readonly searchUsingPOST: TypeofApiCall<
        ReplaceRequestParams<
          SearchUsingPOSTT,
          Omit<RequestParams<SearchUsingPOSTT>, K>
        >
      >;

      readonly deleteUserByIdUsingDELETE: TypeofApiCall<
        ReplaceRequestParams<
          DeleteUserByIdUsingDELETET,
          Omit<RequestParams<DeleteUserByIdUsingDELETET>, K>
        >
      >;

      readonly getUserByInternalIdUsingGET: TypeofApiCall<
        ReplaceRequestParams<
          GetUserByInternalIdUsingGETT,
          Omit<RequestParams<GetUserByInternalIdUsingGETT>, K>
        >
      >;

      readonly updateUserUsingPUT: TypeofApiCall<
        ReplaceRequestParams<
          UpdateUserUsingPUTT,
          Omit<RequestParams<UpdateUserUsingPUTT>, K>
        >
      >;
    };

/**
 * Create an instance of a client
 * @param params hash map of parameters thata define the client:
 *  - baseUrl: the base url for every api call (required)
 *  - fetchApi: an implementation of the fetch() web API, depending on the platform (required)
 *  - basePath: optional path to be appended to the baseUrl
 *  - withDefaults: optional adapter to be applied to every operation, to omit some paramenters
 * @returns a collection of api operations
 */
export function createClient<K extends ParamKeys>(params: {
  baseUrl: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi: typeof fetch;
  withDefaults: WithDefaultsT<K>;
  basePath?: string;
}): Client<K>;
export function createClient(params: {
  baseUrl: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi: typeof fetch;
  withDefaults?: undefined;
  basePath?: string;
}): Client;
export function createClient<K extends ParamKeys>({
  baseUrl,
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi,
  withDefaults,
  basePath = "%7BbasePath%7D"
}: {
  baseUrl: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  fetchApi: typeof fetch;
  withDefaults?: WithDefaultsT<K>;
  basePath?: string;
}) {
  const options = {
    baseUrl,
    fetchApi
  };

  const getInstitutionsUsingGETT: ReplaceRequestParams<
    GetInstitutionsUsingGETT,
    RequestParams<GetInstitutionsUsingGETT>
  > = {
    method: "get",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth
    }),
    response_decoder: getInstitutionsUsingGETDefaultDecoder(),
    url: ({}) => `${basePath}/institutions`,

    query: () => withoutUndefinedValues({})
  };
  const getInstitutionsUsingGET: TypeofApiCall<GetInstitutionsUsingGETT> = createFetchRequestForApi(
    getInstitutionsUsingGETT,
    options
  );

  const getInstitutionUsingGETT: ReplaceRequestParams<
    GetInstitutionUsingGETT,
    RequestParams<GetInstitutionUsingGETT>
  > = {
    method: "get",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth
    }),
    response_decoder: getInstitutionUsingGETDefaultDecoder(),
    url: ({ ["institutionId"]: institutionId }) =>
      `${basePath}/institutions/${institutionId}`,

    query: () => withoutUndefinedValues({})
  };
  const getInstitutionUsingGET: TypeofApiCall<GetInstitutionUsingGETT> = createFetchRequestForApi(
    getInstitutionUsingGETT,
    options
  );

  const saveInstitutionLogoUsingPUTT: ReplaceRequestParams<
    SaveInstitutionLogoUsingPUTT,
    RequestParams<SaveInstitutionLogoUsingPUTT>
  > = {
    method: "put",

    // There is a well-known issue about fetch and Content-Type header when it comes to add multipart/form-data files.
    //  reference: https://github.com/github/fetch/issues/505#issuecomment-293064470
    // The solution is to skip the Content-Type header and let fetch add it for us.
    // @ts-ignore as IRequestType would require something
    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth
    }),
    response_decoder: saveInstitutionLogoUsingPUTDefaultDecoder(),
    url: ({ ["institutionId"]: institutionId }) =>
      `${basePath}/institutions/${institutionId}/logo`,

    body: ({ ["logo"]: logo }) => {
      if (typeof window === "undefined")
        throw new Error(
          "File upload is only support inside a browser runtime envoronment"
        );
      const formData = new FormData();
      formData.append("logo", logo);
      return formData;
    },

    query: () => withoutUndefinedValues({})
  };
  const saveInstitutionLogoUsingPUT: TypeofApiCall<SaveInstitutionLogoUsingPUTT> = createFetchRequestForApi(
    saveInstitutionLogoUsingPUTT,
    options
  );

  const getInstitutionProductsUsingGETT: ReplaceRequestParams<
    GetInstitutionProductsUsingGETT,
    RequestParams<GetInstitutionProductsUsingGETT>
  > = {
    method: "get",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth
    }),
    response_decoder: getInstitutionProductsUsingGETDefaultDecoder(),
    url: ({ ["institutionId"]: institutionId }) =>
      `${basePath}/institutions/${institutionId}/products`,

    query: () => withoutUndefinedValues({})
  };
  const getInstitutionProductsUsingGET: TypeofApiCall<GetInstitutionProductsUsingGETT> = createFetchRequestForApi(
    getInstitutionProductsUsingGETT,
    options
  );

  const getInstitutionProductUsersUsingGETT: ReplaceRequestParams<
    GetInstitutionProductUsersUsingGETT,
    RequestParams<GetInstitutionProductUsersUsingGETT>
  > = {
    method: "get",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth
    }),
    response_decoder: getInstitutionProductUsersUsingGETDefaultDecoder(),
    url: ({ ["institutionId"]: institutionId, ["productId"]: productId }) =>
      `${basePath}/institutions/${institutionId}/products/${productId}/users`,

    query: ({ ["role"]: role, ["productRoles"]: productRoles }) =>
      withoutUndefinedValues({ ["role"]: role, ["productRoles"]: productRoles })
  };
  const getInstitutionProductUsersUsingGET: TypeofApiCall<GetInstitutionProductUsersUsingGETT> = createFetchRequestForApi(
    getInstitutionProductUsersUsingGETT,
    options
  );

  const createInstitutionProductUserUsingPOSTT: ReplaceRequestParams<
    CreateInstitutionProductUserUsingPOSTT,
    RequestParams<CreateInstitutionProductUserUsingPOSTT>
  > = {
    method: "post",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth,

      "Content-Type": "application/json"
    }),
    response_decoder: createInstitutionProductUserUsingPOSTDefaultDecoder(),
    url: ({ ["institutionId"]: institutionId, ["productId"]: productId }) =>
      `${basePath}/institutions/${institutionId}/products/${productId}/users`,

    body: ({ ["body"]: body }) => JSON.stringify(body),

    query: () => withoutUndefinedValues({})
  };
  const createInstitutionProductUserUsingPOST: TypeofApiCall<CreateInstitutionProductUserUsingPOSTT> = createFetchRequestForApi(
    createInstitutionProductUserUsingPOSTT,
    options
  );

  const addUserProductRolesUsingPUTT: ReplaceRequestParams<
    AddUserProductRolesUsingPUTT,
    RequestParams<AddUserProductRolesUsingPUTT>
  > = {
    method: "put",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth,

      "Content-Type": "application/json"
    }),
    response_decoder: addUserProductRolesUsingPUTDefaultDecoder(),
    url: ({
      ["institutionId"]: institutionId,
      ["productId"]: productId,
      ["userId"]: userId
    }) =>
      `${basePath}/institutions/${institutionId}/products/${productId}/users/${userId}`,

    body: ({ ["body"]: body }) => JSON.stringify(body),

    query: () => withoutUndefinedValues({})
  };
  const addUserProductRolesUsingPUT: TypeofApiCall<AddUserProductRolesUsingPUTT> = createFetchRequestForApi(
    addUserProductRolesUsingPUTT,
    options
  );

  const getInstitutionUsersUsingGETT: ReplaceRequestParams<
    GetInstitutionUsersUsingGETT,
    RequestParams<GetInstitutionUsersUsingGETT>
  > = {
    method: "get",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth
    }),
    response_decoder: getInstitutionUsersUsingGETDefaultDecoder(),
    url: ({ ["institutionId"]: institutionId }) =>
      `${basePath}/institutions/${institutionId}/users`,

    query: ({
      ["productId"]: productId,
      ["role"]: role,
      ["productRoles"]: productRoles
    }) =>
      withoutUndefinedValues({
        ["productId"]: productId,
        ["role"]: role,
        ["productRoles"]: productRoles
      })
  };
  const getInstitutionUsersUsingGET: TypeofApiCall<GetInstitutionUsersUsingGETT> = createFetchRequestForApi(
    getInstitutionUsersUsingGETT,
    options
  );

  const getInstitutionUserUsingGETT: ReplaceRequestParams<
    GetInstitutionUserUsingGETT,
    RequestParams<GetInstitutionUserUsingGETT>
  > = {
    method: "get",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth
    }),
    response_decoder: getInstitutionUserUsingGETDefaultDecoder(),
    url: ({ ["institutionId"]: institutionId, ["userId"]: userId }) =>
      `${basePath}/institutions/${institutionId}/users/${userId}`,

    query: () => withoutUndefinedValues({})
  };
  const getInstitutionUserUsingGET: TypeofApiCall<GetInstitutionUserUsingGETT> = createFetchRequestForApi(
    getInstitutionUserUsingGETT,
    options
  );

  const approveOnboardingRequestUsingPOSTT: ReplaceRequestParams<
    ApproveOnboardingRequestUsingPOSTT,
    RequestParams<ApproveOnboardingRequestUsingPOSTT>
  > = {
    method: "post",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth,

      "Content-Type": "application/json"
    }),
    response_decoder: approveOnboardingRequestUsingPOSTDefaultDecoder(),
    url: ({ ["tokenId"]: tokenId }) =>
      `${basePath}/onboarding-requests/approve/${tokenId}`,

    body: () => "{}",

    query: () => withoutUndefinedValues({})
  };
  const approveOnboardingRequestUsingPOST: TypeofApiCall<ApproveOnboardingRequestUsingPOSTT> = createFetchRequestForApi(
    approveOnboardingRequestUsingPOSTT,
    options
  );

  const rejectOnboardingRequestUsingDELETET: ReplaceRequestParams<
    RejectOnboardingRequestUsingDELETET,
    RequestParams<RejectOnboardingRequestUsingDELETET>
  > = {
    method: "delete",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth,

      "Content-Type": "application/json"
    }),
    response_decoder: rejectOnboardingRequestUsingDELETEDefaultDecoder(),
    url: ({ ["tokenId"]: tokenId }) =>
      `${basePath}/onboarding-requests/reject/${tokenId}`,

    query: () => withoutUndefinedValues({})
  };
  const rejectOnboardingRequestUsingDELETE: TypeofApiCall<RejectOnboardingRequestUsingDELETET> = createFetchRequestForApi(
    rejectOnboardingRequestUsingDELETET,
    options
  );

  const retrieveOnboardingRequestUsingGETT: ReplaceRequestParams<
    RetrieveOnboardingRequestUsingGETT,
    RequestParams<RetrieveOnboardingRequestUsingGETT>
  > = {
    method: "get",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth
    }),
    response_decoder: retrieveOnboardingRequestUsingGETDefaultDecoder(),
    url: ({ ["tokenId"]: tokenId }) =>
      `${basePath}/onboarding-requests/${tokenId}`,

    query: () => withoutUndefinedValues({})
  };
  const retrieveOnboardingRequestUsingGET: TypeofApiCall<RetrieveOnboardingRequestUsingGETT> = createFetchRequestForApi(
    retrieveOnboardingRequestUsingGETT,
    options
  );

  const retrieveProductBackofficeUsingGETT: ReplaceRequestParams<
    RetrieveProductBackofficeUsingGETT,
    RequestParams<RetrieveProductBackofficeUsingGETT>
  > = {
    method: "get",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth
    }),
    response_decoder: retrieveProductBackofficeUsingGETDefaultDecoder(),
    url: ({ ["productId"]: productId }) =>
      `${basePath}/products/${productId}/back-office`,

    query: ({
      ["institutionId"]: institutionId,
      ["environment"]: environment
    }) =>
      withoutUndefinedValues({
        ["institutionId"]: institutionId,
        ["environment"]: environment
      })
  };
  const retrieveProductBackofficeUsingGET: TypeofApiCall<RetrieveProductBackofficeUsingGETT> = createFetchRequestForApi(
    retrieveProductBackofficeUsingGETT,
    options
  );

  const getProductRolesUsingGETT: ReplaceRequestParams<
    GetProductRolesUsingGETT,
    RequestParams<GetProductRolesUsingGETT>
  > = {
    method: "get",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth
    }),
    response_decoder: getProductRolesUsingGETDefaultDecoder(),
    url: ({ ["productId"]: productId }) =>
      `${basePath}/products/${productId}/roles`,

    query: () => withoutUndefinedValues({})
  };
  const getProductRolesUsingGET: TypeofApiCall<GetProductRolesUsingGETT> = createFetchRequestForApi(
    getProductRolesUsingGETT,
    options
  );

  const deleteRelationshipByIdUsingDELETET: ReplaceRequestParams<
    DeleteRelationshipByIdUsingDELETET,
    RequestParams<DeleteRelationshipByIdUsingDELETET>
  > = {
    method: "delete",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth,

      "Content-Type": "application/json"
    }),
    response_decoder: deleteRelationshipByIdUsingDELETEDefaultDecoder(),
    url: ({ ["relationshipId"]: relationshipId }) =>
      `${basePath}/relationships/${relationshipId}`,

    query: () => withoutUndefinedValues({})
  };
  const deleteRelationshipByIdUsingDELETE: TypeofApiCall<DeleteRelationshipByIdUsingDELETET> = createFetchRequestForApi(
    deleteRelationshipByIdUsingDELETET,
    options
  );

  const activateRelationshipUsingPOSTT: ReplaceRequestParams<
    ActivateRelationshipUsingPOSTT,
    RequestParams<ActivateRelationshipUsingPOSTT>
  > = {
    method: "post",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth,

      "Content-Type": "application/json"
    }),
    response_decoder: activateRelationshipUsingPOSTDefaultDecoder(),
    url: ({ ["relationshipId"]: relationshipId }) =>
      `${basePath}/relationships/${relationshipId}/activate`,

    body: () => "{}",

    query: () => withoutUndefinedValues({})
  };
  const activateRelationshipUsingPOST: TypeofApiCall<ActivateRelationshipUsingPOSTT> = createFetchRequestForApi(
    activateRelationshipUsingPOSTT,
    options
  );

  const suspendRelationshipUsingPOSTT: ReplaceRequestParams<
    SuspendRelationshipUsingPOSTT,
    RequestParams<SuspendRelationshipUsingPOSTT>
  > = {
    method: "post",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth,

      "Content-Type": "application/json"
    }),
    response_decoder: suspendRelationshipUsingPOSTDefaultDecoder(),
    url: ({ ["relationshipId"]: relationshipId }) =>
      `${basePath}/relationships/${relationshipId}/suspend`,

    body: () => "{}",

    query: () => withoutUndefinedValues({})
  };
  const suspendRelationshipUsingPOST: TypeofApiCall<SuspendRelationshipUsingPOSTT> = createFetchRequestForApi(
    suspendRelationshipUsingPOSTT,
    options
  );

  const exchangeUsingGETT: ReplaceRequestParams<
    ExchangeUsingGETT,
    RequestParams<ExchangeUsingGETT>
  > = {
    method: "get",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth
    }),
    response_decoder: exchangeUsingGETDefaultDecoder(),
    url: ({}) => `${basePath}/token/exchange`,

    query: ({
      ["institutionId"]: institutionId,
      ["productId"]: productId,
      ["environment"]: environment
    }) =>
      withoutUndefinedValues({
        ["institutionId"]: institutionId,
        ["productId"]: productId,
        ["environment"]: environment
      })
  };
  const exchangeUsingGET: TypeofApiCall<ExchangeUsingGETT> = createFetchRequestForApi(
    exchangeUsingGETT,
    options
  );

  const getUserGroupsUsingGETT: ReplaceRequestParams<
    GetUserGroupsUsingGETT,
    RequestParams<GetUserGroupsUsingGETT>
  > = {
    method: "get",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth
    }),
    response_decoder: getUserGroupsUsingGETDefaultDecoder(),
    url: ({}) => `${basePath}/user-groups`,

    query: ({
      ["institutionId"]: institutionId,
      ["page"]: page,
      ["size"]: size,
      ["sort"]: sort,
      ["productId"]: productId,
      ["userId"]: userId
    }) =>
      withoutUndefinedValues({
        ["institutionId"]: institutionId,
        ["page"]: page,
        ["size"]: size,
        ["sort"]: sort,
        ["productId"]: productId,
        ["userId"]: userId
      })
  };
  const getUserGroupsUsingGET: TypeofApiCall<GetUserGroupsUsingGETT> = createFetchRequestForApi(
    getUserGroupsUsingGETT,
    options
  );

  const createUserGroupUsingPOSTT: ReplaceRequestParams<
    CreateUserGroupUsingPOSTT,
    RequestParams<CreateUserGroupUsingPOSTT>
  > = {
    method: "post",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth,

      "Content-Type": "application/json"
    }),
    response_decoder: createUserGroupUsingPOSTDefaultDecoder(),
    url: ({}) => `${basePath}/user-groups/`,

    body: ({ ["body"]: body }) => JSON.stringify(body),

    query: () => withoutUndefinedValues({})
  };
  const createUserGroupUsingPOST: TypeofApiCall<CreateUserGroupUsingPOSTT> = createFetchRequestForApi(
    createUserGroupUsingPOSTT,
    options
  );

  const deleteUserGroupUsingDELETET: ReplaceRequestParams<
    DeleteUserGroupUsingDELETET,
    RequestParams<DeleteUserGroupUsingDELETET>
  > = {
    method: "delete",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth,

      "Content-Type": "application/json"
    }),
    response_decoder: deleteUserGroupUsingDELETEDefaultDecoder(),
    url: ({ ["id"]: id }) => `${basePath}/user-groups/${id}`,

    query: () => withoutUndefinedValues({})
  };
  const deleteUserGroupUsingDELETE: TypeofApiCall<DeleteUserGroupUsingDELETET> = createFetchRequestForApi(
    deleteUserGroupUsingDELETET,
    options
  );

  const getUserGroupByIdUsingGETT: ReplaceRequestParams<
    GetUserGroupByIdUsingGETT,
    RequestParams<GetUserGroupByIdUsingGETT>
  > = {
    method: "get",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth
    }),
    response_decoder: getUserGroupByIdUsingGETDefaultDecoder(),
    url: ({ ["id"]: id }) => `${basePath}/user-groups/${id}`,

    query: ({ ["institutionId"]: institutionId }) =>
      withoutUndefinedValues({ ["institutionId"]: institutionId })
  };
  const getUserGroupByIdUsingGET: TypeofApiCall<GetUserGroupByIdUsingGETT> = createFetchRequestForApi(
    getUserGroupByIdUsingGETT,
    options
  );

  const updateUserGroupUsingPUTT: ReplaceRequestParams<
    UpdateUserGroupUsingPUTT,
    RequestParams<UpdateUserGroupUsingPUTT>
  > = {
    method: "put",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth,

      "Content-Type": "application/json"
    }),
    response_decoder: updateUserGroupUsingPUTDefaultDecoder(),
    url: ({ ["id"]: id }) => `${basePath}/user-groups/${id}`,

    body: ({ ["body"]: body }) => JSON.stringify(body),

    query: () => withoutUndefinedValues({})
  };
  const updateUserGroupUsingPUT: TypeofApiCall<UpdateUserGroupUsingPUTT> = createFetchRequestForApi(
    updateUserGroupUsingPUTT,
    options
  );

  const activateUserGroupUsingPOSTT: ReplaceRequestParams<
    ActivateUserGroupUsingPOSTT,
    RequestParams<ActivateUserGroupUsingPOSTT>
  > = {
    method: "post",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth,

      "Content-Type": "application/json"
    }),
    response_decoder: activateUserGroupUsingPOSTDefaultDecoder(),
    url: ({ ["id"]: id }) => `${basePath}/user-groups/${id}/activate`,

    body: () => "{}",

    query: () => withoutUndefinedValues({})
  };
  const activateUserGroupUsingPOST: TypeofApiCall<ActivateUserGroupUsingPOSTT> = createFetchRequestForApi(
    activateUserGroupUsingPOSTT,
    options
  );

  const addMemberToUserGroupUsingPOSTT: ReplaceRequestParams<
    AddMemberToUserGroupUsingPOSTT,
    RequestParams<AddMemberToUserGroupUsingPOSTT>
  > = {
    method: "post",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth,

      "Content-Type": "application/json"
    }),
    response_decoder: addMemberToUserGroupUsingPOSTDefaultDecoder(),
    url: ({ ["id"]: id, ["userId"]: userId }) =>
      `${basePath}/user-groups/${id}/members/${userId}`,

    body: () => "{}",

    query: () => withoutUndefinedValues({})
  };
  const addMemberToUserGroupUsingPOST: TypeofApiCall<AddMemberToUserGroupUsingPOSTT> = createFetchRequestForApi(
    addMemberToUserGroupUsingPOSTT,
    options
  );

  const suspendUserGroupUsingPOSTT: ReplaceRequestParams<
    SuspendUserGroupUsingPOSTT,
    RequestParams<SuspendUserGroupUsingPOSTT>
  > = {
    method: "post",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth,

      "Content-Type": "application/json"
    }),
    response_decoder: suspendUserGroupUsingPOSTDefaultDecoder(),
    url: ({ ["id"]: id }) => `${basePath}/user-groups/${id}/suspend`,

    body: () => "{}",

    query: () => withoutUndefinedValues({})
  };
  const suspendUserGroupUsingPOST: TypeofApiCall<SuspendUserGroupUsingPOSTT> = createFetchRequestForApi(
    suspendUserGroupUsingPOSTT,
    options
  );

  const deleteMemberFromUserGroupUsingDELETET: ReplaceRequestParams<
    DeleteMemberFromUserGroupUsingDELETET,
    RequestParams<DeleteMemberFromUserGroupUsingDELETET>
  > = {
    method: "delete",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth,

      "Content-Type": "application/json"
    }),
    response_decoder: deleteMemberFromUserGroupUsingDELETEDefaultDecoder(),
    url: ({ ["userGroupId"]: userGroupId, ["userId"]: userId }) =>
      `${basePath}/user-groups/${userGroupId}/members/${userId}`,

    query: () => withoutUndefinedValues({})
  };
  const deleteMemberFromUserGroupUsingDELETE: TypeofApiCall<DeleteMemberFromUserGroupUsingDELETET> = createFetchRequestForApi(
    deleteMemberFromUserGroupUsingDELETET,
    options
  );

  const saveUserUsingPOSTT: ReplaceRequestParams<
    SaveUserUsingPOSTT,
    RequestParams<SaveUserUsingPOSTT>
  > = {
    method: "post",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth,

      "Content-Type": "application/json"
    }),
    response_decoder: saveUserUsingPOSTDefaultDecoder(),
    url: ({}) => `${basePath}/users`,

    body: ({ ["body"]: body }) => JSON.stringify(body),

    query: ({ ["institutionId"]: institutionId }) =>
      withoutUndefinedValues({ ["institutionId"]: institutionId })
  };
  const saveUserUsingPOST: TypeofApiCall<SaveUserUsingPOSTT> = createFetchRequestForApi(
    saveUserUsingPOSTT,
    options
  );

  const searchUsingPOSTT: ReplaceRequestParams<
    SearchUsingPOSTT,
    RequestParams<SearchUsingPOSTT>
  > = {
    method: "post",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth,

      "Content-Type": "application/json"
    }),
    response_decoder: searchUsingPOSTDefaultDecoder(),
    url: ({}) => `${basePath}/users/search`,

    body: ({ ["body"]: body }) => JSON.stringify(body),

    query: ({ ["institutionId"]: institutionId }) =>
      withoutUndefinedValues({ ["institutionId"]: institutionId })
  };
  const searchUsingPOST: TypeofApiCall<SearchUsingPOSTT> = createFetchRequestForApi(
    searchUsingPOSTT,
    options
  );

  const deleteUserByIdUsingDELETET: ReplaceRequestParams<
    DeleteUserByIdUsingDELETET,
    RequestParams<DeleteUserByIdUsingDELETET>
  > = {
    method: "delete",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth,

      "Content-Type": "application/json"
    }),
    response_decoder: deleteUserByIdUsingDELETEDefaultDecoder(),
    url: ({ ["id"]: id }) => `${basePath}/users/${id}`,

    query: () => withoutUndefinedValues({})
  };
  const deleteUserByIdUsingDELETE: TypeofApiCall<DeleteUserByIdUsingDELETET> = createFetchRequestForApi(
    deleteUserByIdUsingDELETET,
    options
  );

  const getUserByInternalIdUsingGETT: ReplaceRequestParams<
    GetUserByInternalIdUsingGETT,
    RequestParams<GetUserByInternalIdUsingGETT>
  > = {
    method: "get",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth
    }),
    response_decoder: getUserByInternalIdUsingGETDefaultDecoder(),
    url: ({ ["id"]: id }) => `${basePath}/users/${id}`,

    query: ({ ["institutionId"]: institutionId }) =>
      withoutUndefinedValues({ ["institutionId"]: institutionId })
  };
  const getUserByInternalIdUsingGET: TypeofApiCall<GetUserByInternalIdUsingGETT> = createFetchRequestForApi(
    getUserByInternalIdUsingGETT,
    options
  );

  const updateUserUsingPUTT: ReplaceRequestParams<
    UpdateUserUsingPUTT,
    RequestParams<UpdateUserUsingPUTT>
  > = {
    method: "put",

    headers: ({ ["bearerAuth"]: bearerAuth }: { bearerAuth: string }) => ({
      Authorization: bearerAuth,

      "Content-Type": "application/json"
    }),
    response_decoder: updateUserUsingPUTDefaultDecoder(),
    url: ({ ["id"]: id }) => `${basePath}/users/${id}`,

    body: ({ ["body"]: body }) => JSON.stringify(body),

    query: ({ ["institutionId"]: institutionId }) =>
      withoutUndefinedValues({ ["institutionId"]: institutionId })
  };
  const updateUserUsingPUT: TypeofApiCall<UpdateUserUsingPUTT> = createFetchRequestForApi(
    updateUserUsingPUTT,
    options
  );

  return {
    getInstitutionsUsingGET: (withDefaults || identity)(
      getInstitutionsUsingGET
    ),
    getInstitutionUsingGET: (withDefaults || identity)(getInstitutionUsingGET),
    saveInstitutionLogoUsingPUT: (withDefaults || identity)(
      saveInstitutionLogoUsingPUT
    ),
    getInstitutionProductsUsingGET: (withDefaults || identity)(
      getInstitutionProductsUsingGET
    ),
    getInstitutionProductUsersUsingGET: (withDefaults || identity)(
      getInstitutionProductUsersUsingGET
    ),
    createInstitutionProductUserUsingPOST: (withDefaults || identity)(
      createInstitutionProductUserUsingPOST
    ),
    addUserProductRolesUsingPUT: (withDefaults || identity)(
      addUserProductRolesUsingPUT
    ),
    getInstitutionUsersUsingGET: (withDefaults || identity)(
      getInstitutionUsersUsingGET
    ),
    getInstitutionUserUsingGET: (withDefaults || identity)(
      getInstitutionUserUsingGET
    ),
    approveOnboardingRequestUsingPOST: (withDefaults || identity)(
      approveOnboardingRequestUsingPOST
    ),
    rejectOnboardingRequestUsingDELETE: (withDefaults || identity)(
      rejectOnboardingRequestUsingDELETE
    ),
    retrieveOnboardingRequestUsingGET: (withDefaults || identity)(
      retrieveOnboardingRequestUsingGET
    ),
    retrieveProductBackofficeUsingGET: (withDefaults || identity)(
      retrieveProductBackofficeUsingGET
    ),
    getProductRolesUsingGET: (withDefaults || identity)(
      getProductRolesUsingGET
    ),
    deleteRelationshipByIdUsingDELETE: (withDefaults || identity)(
      deleteRelationshipByIdUsingDELETE
    ),
    activateRelationshipUsingPOST: (withDefaults || identity)(
      activateRelationshipUsingPOST
    ),
    suspendRelationshipUsingPOST: (withDefaults || identity)(
      suspendRelationshipUsingPOST
    ),
    exchangeUsingGET: (withDefaults || identity)(exchangeUsingGET),
    getUserGroupsUsingGET: (withDefaults || identity)(getUserGroupsUsingGET),
    createUserGroupUsingPOST: (withDefaults || identity)(
      createUserGroupUsingPOST
    ),
    deleteUserGroupUsingDELETE: (withDefaults || identity)(
      deleteUserGroupUsingDELETE
    ),
    getUserGroupByIdUsingGET: (withDefaults || identity)(
      getUserGroupByIdUsingGET
    ),
    updateUserGroupUsingPUT: (withDefaults || identity)(
      updateUserGroupUsingPUT
    ),
    activateUserGroupUsingPOST: (withDefaults || identity)(
      activateUserGroupUsingPOST
    ),
    addMemberToUserGroupUsingPOST: (withDefaults || identity)(
      addMemberToUserGroupUsingPOST
    ),
    suspendUserGroupUsingPOST: (withDefaults || identity)(
      suspendUserGroupUsingPOST
    ),
    deleteMemberFromUserGroupUsingDELETE: (withDefaults || identity)(
      deleteMemberFromUserGroupUsingDELETE
    ),
    saveUserUsingPOST: (withDefaults || identity)(saveUserUsingPOST),
    searchUsingPOST: (withDefaults || identity)(searchUsingPOST),
    deleteUserByIdUsingDELETE: (withDefaults || identity)(
      deleteUserByIdUsingDELETE
    ),
    getUserByInternalIdUsingGET: (withDefaults || identity)(
      getUserByInternalIdUsingGET
    ),
    updateUserUsingPUT: (withDefaults || identity)(updateUserUsingPUT)
  };
}
